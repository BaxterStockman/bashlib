#!/usr/bin/env bash

(( "${#BASHLIBSRC[@]}" )) || BASHLIBSRC=(
    "${HOME+"${HOME}/.@bashlib_basename@.d"}"
    @otherlibdirs@
    @libdir@/@bashlib_basename@
)

(( "${#BASHLIBINC[@]}" )) || BASHLIBINC=()

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlibinc () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Write the contents of $BASHLIBINC to standard output in the form:
# relpath1 canonpath1
# relpath2 canonpath2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    _bashlibinc () {
        local -a filenames=()

        if (( $# )); then
            filenames=("$@")
        else
            filenames=("${!BASHLIBINC_MAP[@]}")
        fi

        local -i longest_filename_len=0
        local -i filename_len
        for filename in "${filenames[@]}"; do
            filename_len=${#filename}
            if (( filename_len > longest_filename_len )); then
                longest_filename_len=$filename_len
            fi
        done

        local format="%-${longest_filename_len}s %-s\n"

        for filename in "${filenames[@]}"; do
            # shellcheck disable=SC2059
            printf "$format" "$filename" "${BASHLIBINC_MAP[$filename]:-}"
        done
    }

    bashlib::mkmap _bashlibinc "$@"
    local -i ret=$?
    unset -f _bashlibinc &>-
    return "$ret"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlibsrc () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Prints the contents of $BASHLIBSRC to standard output
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -a bashlibdirs=()
    IFS=$':' read -ra bashlibdirs <<<"$BASHLIB"

    local dir=''
    if [[ "$BASHLIBTAINT" == true ]] && [[ "$BASHLIBTAINT" -eq 1 ]]; then
        for dir in "${bashlibdirs[@]}" "${BASHLIBSRC[@]}"; do
            [[ $dir != . ]] && echo "$dir"
        done
    else
        for dir in "${bashlibdirs[@]}" "${BASHLIBSRC[@]}" '.'; do
            echo "$dir"
        done
    fi
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
require () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# require BASH_MODULE
#
# A wrapper around the 'source' builtin that supports a Perlish approach to
# creating libraries of shell scripts.
#
# Environment variables:
#   BASHLIB
#       A colon-separated list of filesystem paths in the style of PATH.  These
#       directories will be searched for files matching the BASH_MODULE
#       argument, in essentially the same form that perl searches @INC for .pm
#       files.
#   BASHLIBEXT
#       A file extension.  Default value is '.@bashlibext@'.
#   BASHLIBTAINT
#       When true, 'require' does not search for files in '.'.
#
# Arguments:
#   BASH_MODULE
#       A string representing either (1) a filename or (2) a module name of the
#       form 'my::shell::module'.  In the latter case, 'require' translates the
#       module name to a filename of the form "my/shell/module${BASHLIBEXT}".
#
# Exit Codes:
#   0   success
#   1   catchall
#   2   error in arguments
#   3   error sourcing file
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local maybe_mod_name="$1"

    if [[ -z "$maybe_mod_name" ]]; then
        printf 'You must provide a module name or file name\n' 1>&2
        return 2
    fi

    local ext="${BASHLIBEXT:-@bashlibext@}"

    # We determine whether maybe_mod_name holds a filename, or whether we need
    # to translate it to a filename.
    local filename
    if [[ "$maybe_mod_name" == *".${ext}" ]]; then
        filename="$maybe_mod_name"
    else
        # Replace all instances of '::' in maybe_mod_name with '/', then append
        # the filename extension.
        local filename_prefix="${maybe_mod_name//:://}"
        filename="${filename_prefix}.${ext}"
    fi

    local libdir=''
    local -a libdirs
    while read -r libdir; do
        libdirs+=("$libdir")
    done < <(bashlibsrc)

    local canonpath=''
    for libdir in "${libdirs[@]}"; do
        canonpath="${libdir}/${filename}"
        if [[ -f "$canonpath" ]]; then
            # Allow 'source' to fail and print a diagnostic message.  This is
            # useful when the file exists but isn't readable.
            # shellcheck disable=SC1090
            if source "$canonpath"; then
                bashlib::mkmap bashlib::addentry "$filename" "$canonpath"
                return $?
            else
                return 3
            fi
        fi
    done

    printf -- "bashlib: can't locate '%s' in BASHLIBSRC (BASHLIBSRC contains: %s)\n" \
        "$filename" \
        "${libdirs[*]}" \
        1>&2

    return 1
}

#
# Version-specific declarations
#
if (( BASH_VERSINFO[0] >= 4 )) && (( BASH_VERSINFO[1] >= 2 )); then

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::mkmap () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    declare -Agx BASHLIBINC_MAP
    declare -f "$1" &>- && "$@"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::addentry () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    BASHLIBINC_MAP["$1"]="$2"
    BASHLIBINC=("${!BASHLIBINC_MAP[@}]}")
}

else

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::mkmap () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Transforms the $BASHLIBINC array into an associative array, $BASHLIBINC_MAP,
# and then calls the first of its arguments as if it were a command, passing
# the remaining commands as arguments.  This is done so that the provided
# command has $BASHLIBINC_MAP is its scope.
#
# Ex.:
#
# bashlib::mkmap foo --verbose bar # Calls `foo --verbose bar`
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -A BASHLIBINC_MAP=()

    local entry='' relpath=''
    for entry in "${BASHLIBINC[@]}"; do
        relpath="${entry%%::*}"
        BASHLIBINC_MAP[$relpath]="${entry#*::}"
    done

    export BASHLIBINC_MAP

    declare -f "$1" &>- && "$@"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::addentry () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local filename="$1"
    shift
    local canonpath="$2"

    local entry=''
    local -i i=0

    # Wish Bash had `declare -g' prior to 4.2...
    for (( i=0 ; i < "${#BASHLIBINC[@]}"; i++ )); do
        if [[ "$filename" == "${BASHLIBINC[i]%%::*}" ]]; then
            BASHLIBINC[i]="${filename}::${canonpath}"
            return 0
        fi
    done

    BASHLIBINC+=("${filename}::${canonpath}")
}

fi
#
# / Version-specific declarations
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::usage () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    echo 'Usage: bashlib [--source] [-L|--add-lib LIBPATH] [-h|--help]'
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib::help () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bashlib::usage
    return $?
    printf '%s' "\

"
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bashlib () {
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ! (( $# )); then
        bashlib::usage
        exit 1
    fi

    local -i do_source=0
    while (( $# )); do
        read -r opt_name opt_arg _ <<<"$@"
        case "$opt_name" in
            -L|--add-lib)
                BASHLIBSRC=("$opt_arg" "${BASHLIBSRC[@]}")
                shift 2
                ;;
            -s|--source)
                do_source=1
                shift
                ;;
            -h|--help)
                bashlib::help
                return 0
                ;;
            -D|--deactivate)
                unset -f bashlib{,inc,src,::{help,usage,mkmap,addentry}} require
                unset -v BASHLIBINC{,_MAP} BASHLIBSRC
                shift
                ;;
            *)
                printf -- 'bashlib: %s: invalid option\n' "${opt_name}" 1>&2
                return 1
                ;;
        esac
    done

    if (( do_source )); then
        local -a evallines=(
            "source ${BASH_SOURCE[0]}"
        )

        printf '%s ;\n' "${evallines[@]}"
        return 0
    fi
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
    bashlib "$@"
fi
